{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/injectStyle.js","webpack:///./src/components/headpic.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","e","then","t","bind","IndexPage","_ref","data","a","createElement","title","injectStyle","style","styleElement","document","styleSheet","head","appendChild","sheet","insertRule","cssRules","length","HeadPic","pic","_3371093467","react_default","gatsby_image_default","fixed","file","childImageSharp","Footer","_useState","useState","deployed","setDeployed","profile","_3899957290","className","onClick","event","prismicProfile","location","headpic","bio","raw","map","p","key","text","Date","getFullYear","href","Layout","children","wheelLevel","setWheelLevel","_useState2","status","setStatus","projects","_4203411656","projectsElements","allPrismicProject","edges","item","gatsby_plugin_transition_link_default","to","node","slugs","exit","trigger","_ref2","entry","state","mode","_ref3","delay","id","onMouseEnter","color","name","tags","tag","slug","borderColor","backgroundColor","year","projectPictures","fluid","cover","localFile","gradient","Math","round","join","blockColor","Fragment","footer","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-d9e2b1f7a65a2d3c0b68.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport(\"../sass/main.sass\")\n\nconst IndexPage = ({data}) => (\n  \n  <Layout data={data}>\n    <SEO title=\"Home\" />\n    {/* <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      <Image />\n    </div> \n    <Link to=\"/page-2/\">Go to page 2</Link> */}\n  </Layout>\n)\n\nexport default  IndexPage\n","const injectStyle = (style) => {\nconst styleElement = document.createElement('style');\nlet styleSheet = null;\n\ndocument.head.appendChild(styleElement);\n\nstyleSheet = styleElement.sheet;\n\nstyleSheet.insertRule(style, styleSheet.cssRules.length);\n};\n\nexport default injectStyle;","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n\nconst HeadPic = () => {\n    const pic = useStaticQuery(graphql`\n    query {\n        file(relativePath: { eq: \"gatsby-icon.png\" }) {\n            childImageSharp {\n                fixed(width: 75, height: 75) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n    }`)\n\n    return(\n        <Img fixed={pic.file.childImageSharp.fixed} />\n    )\n    \n}\n\nexport default HeadPic","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport HeadPic from \"./headpic\"\n\nconst Footer = () => {\n    const [deployed, setDeployed] = useState(\n        false\n    );\n\n    const profile = useStaticQuery(graphql`\n    query {\n        prismicProfile {\n            data {\n                bio {\n                    raw {\n                        text\n                    }\n                }\n                github {\n                    url\n                }\n                location\n                title\n                linkedin {\n                    url\n                }\n                resume {\n                    url\n                }\n            }\n        }\n    }`)\n\n    return(\n        <footer className={ deployed ? \"open\": \"\"}>\n            <div className=\"block\" onClick={event => setDeployed(!deployed)}>\n                <div className=\"position\">{profile.prismicProfile.data.title}</div>\n                <div className=\"location\">! {profile.prismicProfile.data.location}</div>\n            </div>\n            <div className=\"name\" onClick={event => setDeployed(!deployed)}>Vincent Giardina</div>\n            <div className=\"content\">\n                <HeadPic/>\n                { profile.prismicProfile.data.bio.raw.map((p) => <p className=\"bio\" key={\"text-\" + p.text}>{p.text}</p> ) }\n                <h1>Credits</h1>\n                Â© {new Date().getFullYear()}, Built with\n                {` `}\n                <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport injectStyle from '../utils/injectStyle';\nimport { Link } from \"gatsby\"\nimport TransitionLink from \"gatsby-plugin-transition-link\"\nimport anime from \"animejs\"\n\nimport Footer from \"./footer\"\nimport Img from \"gatsby-image\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const [wheelLevel, setWheelLevel] = useState(\n    0\n  );\n\n  const STATUS_MENU = \"menu\";\n  const STATUS_TRANSITION = \"transition\"\n  const STATUS_PROJECT = \"project\"\n  const [status, setStatus] = useState(\n    STATUS_MENU\n  );\n\n  const projects = useStaticQuery(graphql`\n  query {\n    allPrismicProject {\n      edges {\n        node {\n          data {\n            color\n            for\n            name {\n              text\n            }\n            with\n            year\n            tags {\n              tag {\n                raw {\n                  slug\n                }\n              }\n            }\n            cover {\n              localFile {\n                childImageSharp {\n                  fluid(maxWidth: 400, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          slugs\n        }\n      }\n    }\n  }\n  `)\n\n\n  // TODO: keep the header?\n  // TODO: appropriate way to import the image\n  // TODO: add a graphical signature indicating the current project in the wheel  \n\n  const projectsElements = projects.allPrismicProject.edges.map((item, key) =>{\n          const animOut = (node, e, exit, entry) => {\n            setStatus(STATUS_TRANSITION);\n          }\n          const animIn = (node, e, exit, entry) => {\n            setStatus(STATUS_PROJECT);\n          }\n          return(\n            <TransitionLink to={ \"/\" + item.node.slugs[0] }\n            exit={{\n              trigger: ({ node, e, exit, entry }) => animOut(node, e, exit, entry),\n              length: 0.5,\n              state: {\n                mode: \"in\"\n              }\n            }}\n            entry={{\n              trigger: ({ node, e, exit, entry }) => animIn(node, e, exit, entry),\n              length: 0.5,\n              delay: 0.5\n            }}\n            >\n              <div className=\"project\" id={key} onMouseEnter={event => setWheelLevel(key)}>\n                  <h1 style={{color: item.node.data.color}}>{item.node.data.name.text}</h1>\n                  <h1>{item.node.data.name.text}</h1>\n                  {\n                    item.node.data.tags.map((tag) => <div className=\"tag\" key={tag.tag.raw.slug+key} style={{ borderColor: item.node.data.color}}>{tag.tag.raw.slug}</div>)\n                  }\n                  <div className=\"year\" style={{ backgroundColor: item.node.data.color}}>{item.node.data.year}</div>\n              </div>\n            </TransitionLink>\n          )\n        }\n    );\n  \n  const projectPictures = projects.allPrismicProject.edges.map((item, key) =>\n        <div className=\"postcard\">\n            <Img className={ key == wheelLevel ? \"selected\" : \"\" } style={{ borderColor: item.node.data.color}} fluid={item.node.data.cover.localFile.childImageSharp.fluid} />\n        </div>\n  );\n\n  const gradientSteps = projects.allPrismicProject.edges.map((item, key) => {\n    const n = projects.allPrismicProject.edges.length\n    const p = Math.round(key * (100 / n));\n    return(p + \"% {background-color: \" + item.node.data.color +\";}\")\n  })\n  const gradient = `\n    @keyframes gradient {\n      `+ gradientSteps.join(\" \") +`\n    }\n  `;\n  const blockColor = `\n    footer.open .block{\n      background-color: ` + projects.allPrismicProject.edges[0].node. data.color + `;\n    }\n  `\n  injectStyle(gradient);\n  injectStyle(blockColor);\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div className=\"container\">\n        <div className={\"wheel level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectPictures}\n        </div>\n        <div className={\"store level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectsElements}\n        </div>\n        {/* TODO: write the good adress */}\n        <div className=\"hey\">bonjour@giardi.fr</div>\n        <main className={(status == STATUS_PROJECT?\"open\":\"\")}>{children}</main>\n        <Footer/>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}