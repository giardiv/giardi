{"version":3,"sources":["webpack:///./src/templates/project.js","webpack:///./src/components/headpic.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js"],"names":["Project","_ref","pageContext","data","project","transitionStatus","entry","exit","uid","allPrismicProject","edges","node","_useState","useState","deployed","setDeployed","useEffect","setTimeout","bind","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_2__","className","style","borderColor","color","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fluid","cover","localFile","childImageSharp","name","text","query","HeadPic","pic","_3371093467","react_default","gatsby_image_default","fixed","file","Footer","props","profile","_3899957290","gradient","blockColor","onClick","event","prismicProfile","title","location","headpic","bio","raw","map","p","key","Date","getFullYear","href","Layout","children","wheelLevel","setWheelLevel","_useState2","status","setStatus","projects","_4203411656","projectsElements","item","gatsby_plugin_transition_link_default","to","slugs","trigger","_ref2","e","length","state","mode","_ref3","delay","id","onMouseEnter","tags","tag","slug","backgroundColor","year","projectPictures","n","Math","round","join","Fragment","footer"],"mappings":"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","file":"component---src-templates-project-js-1f8016d470328c00d644.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport TransitionLink from \"gatsby-plugin-transition-link\"\n\nimport Img from \"gatsby-image\"\n\n\nconst Project = ({ pageContext, data, transitionStatus, entry, exit}) => {\n    const uid = pageContext.uid;\n    const project = data.allPrismicProject.edges[0].node.data;\n    \n    const [deployed, setDeployed] = useState(false);\n    useEffect(() => setTimeout(function() { setDeployed(true) }.bind(this), 10), []);\n    return (\n        <Layout>\n            <div>\n                <div className=\"container\">\n                    <header>\n                        <div className={\"cover \" + (deployed? \"deployed\" : \"\")} style={{ borderColor: project.color}}>\n                            <Img  fluid={project.cover.localFile.childImageSharp.fluid} />\n                        </div>\n                        <h1 style={{color: project.color}}>{project.name.text}</h1>\n                        <h1>{project.name.text}</h1>\n                    </header>\n                </div>\n            </div>\n        </Layout>\n    )\n}\nexport default Project\n\n\nexport const query = graphql\n    `\n    query($uid: String) {\n        allPrismicProject(filter: {uid: {eq: $uid}}) {\n            edges {\n                node {\n                    data {\n                        color\n                        for\n                        name {\n                            text\n                        }\n                        cover {\n                            localFile {\n                                childImageSharp {\n                                    fluid(maxWidth: 400, maxHeight: 250) {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    slugs\n                    uid\n                }\n            }\n        }\n    }\n    `","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n\nconst HeadPic = () => {\n    const pic = useStaticQuery(graphql`\n    query {\n        file(relativePath: { eq: \"gatsby-icon.png\" }) {\n            childImageSharp {\n                fixed(width: 75, height: 75) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n    }`)\n\n    return(\n        <Img fixed={pic.file.childImageSharp.fixed} />\n    )\n    \n}\n\nexport default HeadPic","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport HeadPic from \"./headpic\"\n\nconst Footer = (props) => {\n    const [deployed, setDeployed] = useState(\n        false\n    );\n\n    const profile = useStaticQuery(graphql`\n    query {\n        prismicProfile {\n            data {\n                bio {\n                    raw {\n                        text\n                    }\n                }\n                github {\n                    url\n                }\n                location\n                title\n                linkedin {\n                    url\n                }\n                resume {\n                    url\n                }\n            }\n        }\n    }`)\n\n    return(\n        <footer className={ deployed ? \"open\": \"\"}>\n            <style>{props.gradient} {props.blockColor}</style>\n            <div className=\"block\" onClick={event => setDeployed(!deployed)}>\n                <div className=\"position\">{profile.prismicProfile.data.title}</div>\n                <div className=\"location\">! {profile.prismicProfile.data.location}</div>\n            </div>\n            <div className=\"name\" onClick={event => setDeployed(!deployed)}>Vincent Giardina</div>\n            <div className=\"content\">\n                <HeadPic/>\n                { profile.prismicProfile.data.bio.raw.map((p) => <p className=\"bio\" key={\"text-\" + p.text}>{p.text}</p> ) }\n                <h1>Credits</h1>\n                Â© {new Date().getFullYear()}, Built with\n                {` `}\n                <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport injectStyle from '../utils/injectStyle';\nimport { Link } from \"gatsby\"\nimport TransitionLink from \"gatsby-plugin-transition-link\"\nimport anime from \"animejs\"\n\nimport Footer from \"./footer\"\nimport Img from \"gatsby-image\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const [wheelLevel, setWheelLevel] = useState(\n    0\n  );\n\n  const STATUS_MENU = \"menu\";\n  const STATUS_TRANSITION = \"transition\"\n  const STATUS_PROJECT = \"project\"\n  const [status, setStatus] = useState(\n    STATUS_MENU\n  );\n\n  const projects = useStaticQuery(graphql`\n  query {\n    allPrismicProject {\n      edges {\n        node {\n          data {\n            color\n            for\n            name {\n              text\n            }\n            with\n            year\n            tags {\n              tag {\n                raw {\n                  slug\n                }\n              }\n            }\n            cover {\n              localFile {\n                childImageSharp {\n                  fluid(maxWidth: 400, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          slugs\n        }\n      }\n    }\n  }\n  `)\n\n\n  // TODO: keep the header?\n  // TODO: appropriate way to import the image\n  // TODO: add a graphical signature indicating the current project in the wheel  \n\n  const projectsElements = projects.allPrismicProject.edges.map((item, key) =>{\n          const animOut = (node, e, exit, entry) => {\n            setStatus(STATUS_TRANSITION);\n          }\n          const animIn = (node, e, exit, entry) => {\n            setStatus(STATUS_PROJECT);\n          }\n          return(\n            <TransitionLink to={ \"/\" + item.node.slugs[0] }\n            exit={{\n              trigger: ({ node, e, exit, entry }) => animOut(node, e, exit, entry),\n              length: 0.5,\n              state: {\n                mode: \"in\"\n              }\n            }}\n            entry={{\n              trigger: ({ node, e, exit, entry }) => animIn(node, e, exit, entry),\n              length: 0.5,\n              delay: 0.5\n            }}\n            >\n              <div className=\"project\" id={key} onMouseEnter={event => setWheelLevel(key)}>\n                  <h1 style={{color: item.node.data.color}}>{item.node.data.name.text}</h1>\n                  <h1>{item.node.data.name.text}</h1>\n                  {\n                    item.node.data.tags.map((tag) => <div className=\"tag\" key={tag.tag.raw.slug+key} style={{ borderColor: item.node.data.color}}>{tag.tag.raw.slug}</div>)\n                  }\n                  <div className=\"year\" style={{ backgroundColor: item.node.data.color}}>{item.node.data.year}</div>\n              </div>\n            </TransitionLink>\n          )\n        }\n    );\n  \n  const projectPictures = projects.allPrismicProject.edges.map((item, key) =>\n        <div className=\"postcard\">\n            <Img className={ key == wheelLevel ? \"selected\" : \"\" } style={{ borderColor: item.node.data.color}} fluid={item.node.data.cover.localFile.childImageSharp.fluid} />\n        </div>\n  );\n\n  const gradientSteps = projects.allPrismicProject.edges.map((item, key) => {\n    const n = projects.allPrismicProject.edges.length\n    const p = Math.round(key * (100 / n));\n    return(p + \"% {background-color: \" + item.node.data.color +\";}\")\n  })\n  const gradient = `\n    @keyframes gradient {\n      `+ gradientSteps.join(\" \") +`\n    }\n  `;\n  const blockColor = `\n    footer.open .block{\n      background-color: ` + projects.allPrismicProject.edges[0].node. data.color + `;\n    }\n  `\n  \n  //useEffect(() => function() { }, []);\n  //injectStyle(gradient); injectStyle(blockColor) \n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div className=\"container\">\n        <div className={\"wheel level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectPictures}\n        </div>\n        <div className={\"store level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectsElements}\n        </div>\n        {/* TODO: write the good adress */}\n        <div className=\"hey\">bonjour@giardi.fr</div>\n        <main className={(status == STATUS_PROJECT?\"open\":\"\")}>{children}</main>\n        <Footer gradient={gradient} blockColor={blockColor}/>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n\n"],"sourceRoot":""}