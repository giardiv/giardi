{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/headpic.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","e","then","t","bind","IndexPage","_ref","data","a","createElement","title","HeadPic","pic","_3371093467","react_default","gatsby_image_default","fixed","file","childImageSharp","Footer","props","_useState","useState","deployed","setDeployed","profile","_3899957290","className","gradient","blockColor","onClick","event","prismicProfile","location","headpic","bio","raw","map","p","key","text","Date","getFullYear","href","Layout","children","wheelLevel","setWheelLevel","_useState2","status","setStatus","projects","_4203411656","projectsElements","allPrismicProject","edges","item","gatsby_plugin_transition_link_default","to","node","slugs","exit","trigger","_ref2","entry","length","state","mode","_ref3","delay","id","onMouseEnter","style","color","name","tags","tag","slug","borderColor","backgroundColor","year","projectPictures","fluid","cover","localFile","Math","round","join","Fragment","footer","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,GAAAN,EAAA,KAAAA,EAAA,MAAAO,EAAAP,EAAA,KAMAA,EAAAQ,EAAA,GAAAC,KAAAT,EAAAU,EAAAC,KAAA,aAgBgBC,UAdE,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OAEhBV,EAAAW,EAAAC,cAACV,EAAA,EAAD,CAAQQ,KAAMA,GACZV,EAAAW,EAAAC,cAACT,EAAA,EAAD,CAAKU,MAAM,qjRCYAC,EAlBC,WACZ,IAAMC,EAAGC,EAAAN,KAWT,OACIO,EAAAN,EAAAC,cAACM,EAAAP,EAAD,CAAKQ,MAAOJ,EAAIK,KAAKC,gBAAgBF,SCoC9BG,EAjDA,SAACC,GAAU,IAAAC,EACUC,oBAC5B,GADGC,EADeF,EAAA,GACLG,EADKH,EAAA,GAKhBI,EAAOC,EAAAnB,KAwBb,OACIO,EAAAN,EAAAC,cAAA,UAAQkB,UAAYJ,EAAW,OAAQ,IACnCT,EAAAN,EAAAC,cAAA,aAAQW,EAAMQ,SAAd,IAAyBR,EAAMS,YAC/Bf,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,QAAQG,QAAS,SAAAC,GAAK,OAAIP,GAAaD,KAClDT,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,YAAYF,EAAQO,eAAezB,KAAKG,OACvDI,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,YAAf,KAA6BF,EAAQO,eAAezB,KAAK0B,WAE7DnB,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,OAAOG,QAAS,SAAAC,GAAK,OAAIP,GAAaD,KAArD,oBACAT,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,WACXb,EAAAN,EAAAC,cAACyB,EAAD,MACET,EAAQO,eAAezB,KAAK4B,IAAIC,IAAIC,IAAI,SAACC,GAAD,OAAOxB,EAAAN,EAAAC,cAAA,KAAGkB,UAAU,MAAMY,IAAK,QAAUD,EAAEE,MAAOF,EAAEE,QAC9F1B,EAAAN,EAAAC,cAAA,qBAHJ,MAIO,IAAIgC,MAAOC,cAJlB,mBAMI5B,EAAAN,EAAAC,cAAA,KAAGkC,KAAK,4BAAR,oBCqGDC,IAzIA,SAAAtC,GAAkB,IAAfuC,EAAevC,EAAfuC,SAAexB,EACKC,mBAClC,GADKwB,EADwBzB,EAAA,GACZ0B,EADY1B,EAAA,GAAA2B,EAQH1B,mBAHR,QAGb2B,EARwBD,EAAA,GAQhBE,EARgBF,EAAA,GAYzBG,EAAQC,EAAA7C,KA0CR8C,EAAmBF,EAASG,kBAAkBC,MAAMlB,IAAI,SAACmB,EAAMjB,GAO7D,OACEzB,EAAAN,EAAAC,cAACgD,EAAAjD,EAAD,CAAgBkD,GAAK,IAAMF,EAAKG,KAAKC,MAAM,GAC3CC,KAAM,CACJC,QAAS,SAAAC,KAAGJ,KAAHI,EAAS9D,EAAT8D,EAAYF,KAAZE,EAAkBC,MAR7Bd,EAlDgB,eA2Dde,OAAQ,GACRC,MAAO,CACLC,KAAM,OAGVH,MAAO,CACLF,QAAS,SAAAM,KAAGT,KAAHS,EAASnE,EAATmE,EAAYP,KAAZO,EAAkBJ,MAZ7Bd,EApDa,YAiEXe,OAAQ,GACRI,MAAO,KAGPvD,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,UAAU2C,GAAI/B,EAAKgC,aAAc,SAAAxC,GAAK,OAAIgB,EAAcR,KACnEzB,EAAAN,EAAAC,cAAA,MAAI+D,MAAO,CAACC,MAAOjB,EAAKG,KAAKpD,KAAKkE,QAASjB,EAAKG,KAAKpD,KAAKmE,KAAKlC,MAC/D1B,EAAAN,EAAAC,cAAA,UAAK+C,EAAKG,KAAKpD,KAAKmE,KAAKlC,MAEvBgB,EAAKG,KAAKpD,KAAKoE,KAAKtC,IAAI,SAACuC,GAAD,OAAS9D,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,MAAMY,IAAKqC,EAAIA,IAAIxC,IAAIyC,KAAKtC,EAAKiC,MAAO,CAAEM,YAAatB,EAAKG,KAAKpD,KAAKkE,QAASG,EAAIA,IAAIxC,IAAIyC,QAE7I/D,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,OAAO6C,MAAO,CAAEO,gBAAiBvB,EAAKG,KAAKpD,KAAKkE,QAASjB,EAAKG,KAAKpD,KAAKyE,UAOjGC,EAAkB9B,EAASG,kBAAkBC,MAAMlB,IAAI,SAACmB,EAAMjB,GAAP,OACvDzB,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,YACXb,EAAAN,EAAAC,cAACM,EAAAP,EAAD,CAAKmB,UAAYY,GAAOO,EAAa,WAAa,GAAK0B,MAAO,CAAEM,YAAatB,EAAKG,KAAKpD,KAAKkE,OAAQS,MAAO1B,EAAKG,KAAKpD,KAAK4E,MAAMC,UAAUlE,gBAAgBgE,WAS9JtD,EAAW,sCALKuB,EAASG,kBAAkBC,MAAMlB,IAAI,SAACmB,EAAMjB,GAChE,IAAMzC,EAAIqD,EAASG,kBAAkBC,MAAMU,OAE3C,OADUoB,KAAKC,MAAM/C,GAAO,IAAMzC,IACvB,wBAA0B0D,EAAKG,KAAKpD,KAAKkE,MAAO,OAIxCc,KAAK,KAFT,cAKX1D,EAAa,sDAEOsB,EAASG,kBAAkBC,MAAM,GAAGI,KAAMpD,KAAKkE,MAFtD,eASnB,OACE3D,EAAAN,EAAAC,cAAAK,EAAAN,EAAAgF,SAAA,KAEE1E,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,aACbb,EAAAN,EAAAC,cAAA,OAAKkB,UAAW,eAAiBmB,GAhHb,cAgHgCG,EAA4B,YAAY,KACzFgC,GAEHnE,EAAAN,EAAAC,cAAA,OAAKkB,UAAW,eAAiBmB,GAnHb,cAmHgCG,EAA4B,YAAY,KACzFI,GAGHvC,EAAAN,EAAAC,cAAA,OAAKkB,UAAU,OAAf,qBACAb,EAAAN,EAAAC,cAAA,QAAMkB,UAvHW,WAuHCsB,EAAyB,OAAO,IAAMJ,GACxD/B,EAAAN,EAAAC,cAACgF,EAAD,CAAQ7D,SAAUA,EAAUC,WAAYA,wFC/HhD,SAAS6D,EAATpF,GAAiD,IAAlCqF,EAAkCrF,EAAlCqF,YAAaC,EAAqBtF,EAArBsF,KAAMC,EAAevF,EAAfuF,KAAMnF,EAASJ,EAATI,MAC9BoF,EADuCC,EAAAxF,KACvCuF,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACEO,EAAA1F,EAAAC,cAAC0F,EAAA3F,EAAD,CACE4F,eAAgB,CACdR,QAEFlF,MAAOA,EACP2F,cAAa,QAAUP,EAAKG,aAAavF,MACzCmF,KAAM,CACJ,CACEnB,KAAI,cACJ4B,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS5F,GAEX,CACE6F,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACE5B,KAAI,eACJ4B,QAAO,WAET,CACE5B,KAAI,kBACJ4B,QAASR,EAAKG,aAAaO,QAE7B,CACE9B,KAAI,gBACJ4B,QAAS5F,GAEX,CACEgE,KAAI,sBACJ4B,QAASN,IAEXS,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED","file":"component---src-pages-index-js-990f0437a4de88ed295a.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport(\"../sass/main.sass\")\n\nconst IndexPage = ({data}) => (\n  \n  <Layout data={data}>\n    <SEO title=\"Home\" />\n    {/* <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      <Image />\n    </div> \n    <Link to=\"/page-2/\">Go to page 2</Link> */}\n  </Layout>\n)\n\nexport default  IndexPage\n","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n\nconst HeadPic = () => {\n    const pic = useStaticQuery(graphql`\n    query {\n        file(relativePath: { eq: \"gatsby-icon.png\" }) {\n            childImageSharp {\n                fixed(width: 75, height: 75) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n    }`)\n\n    return(\n        <Img fixed={pic.file.childImageSharp.fixed} />\n    )\n    \n}\n\nexport default HeadPic","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport HeadPic from \"./headpic\"\n\nconst Footer = (props) => {\n    const [deployed, setDeployed] = useState(\n        false\n    );\n\n    const profile = useStaticQuery(graphql`\n    query {\n        prismicProfile {\n            data {\n                bio {\n                    raw {\n                        text\n                    }\n                }\n                github {\n                    url\n                }\n                location\n                title\n                linkedin {\n                    url\n                }\n                resume {\n                    url\n                }\n            }\n        }\n    }`)\n\n    return(\n        <footer className={ deployed ? \"open\": \"\"}>\n            <style>{props.gradient} {props.blockColor}</style>\n            <div className=\"block\" onClick={event => setDeployed(!deployed)}>\n                <div className=\"position\">{profile.prismicProfile.data.title}</div>\n                <div className=\"location\">! {profile.prismicProfile.data.location}</div>\n            </div>\n            <div className=\"name\" onClick={event => setDeployed(!deployed)}>Vincent Giardina</div>\n            <div className=\"content\">\n                <HeadPic/>\n                { profile.prismicProfile.data.bio.raw.map((p) => <p className=\"bio\" key={\"text-\" + p.text}>{p.text}</p> ) }\n                <h1>Credits</h1>\n                Â© {new Date().getFullYear()}, Built with\n                {` `}\n                <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport injectStyle from '../utils/injectStyle';\nimport { Link } from \"gatsby\"\nimport TransitionLink from \"gatsby-plugin-transition-link\"\nimport anime from \"animejs\"\n\nimport Footer from \"./footer\"\nimport Img from \"gatsby-image\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const [wheelLevel, setWheelLevel] = useState(\n    0\n  );\n\n  const STATUS_MENU = \"menu\";\n  const STATUS_TRANSITION = \"transition\"\n  const STATUS_PROJECT = \"project\"\n  const [status, setStatus] = useState(\n    STATUS_MENU\n  );\n\n  const projects = useStaticQuery(graphql`\n  query {\n    allPrismicProject {\n      edges {\n        node {\n          data {\n            color\n            for\n            name {\n              text\n            }\n            with\n            year\n            tags {\n              tag {\n                raw {\n                  slug\n                }\n              }\n            }\n            cover {\n              localFile {\n                childImageSharp {\n                  fluid(maxWidth: 400, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          slugs\n        }\n      }\n    }\n  }\n  `)\n\n\n  // TODO: keep the header?\n  // TODO: appropriate way to import the image\n  // TODO: add a graphical signature indicating the current project in the wheel  \n\n  const projectsElements = projects.allPrismicProject.edges.map((item, key) =>{\n          const animOut = (node, e, exit, entry) => {\n            setStatus(STATUS_TRANSITION);\n          }\n          const animIn = (node, e, exit, entry) => {\n            setStatus(STATUS_PROJECT);\n          }\n          return(\n            <TransitionLink to={ \"/\" + item.node.slugs[0] }\n            exit={{\n              trigger: ({ node, e, exit, entry }) => animOut(node, e, exit, entry),\n              length: 0.5,\n              state: {\n                mode: \"in\"\n              }\n            }}\n            entry={{\n              trigger: ({ node, e, exit, entry }) => animIn(node, e, exit, entry),\n              length: 0.5,\n              delay: 0.5\n            }}\n            >\n              <div className=\"project\" id={key} onMouseEnter={event => setWheelLevel(key)}>\n                  <h1 style={{color: item.node.data.color}}>{item.node.data.name.text}</h1>\n                  <h1>{item.node.data.name.text}</h1>\n                  {\n                    item.node.data.tags.map((tag) => <div className=\"tag\" key={tag.tag.raw.slug+key} style={{ borderColor: item.node.data.color}}>{tag.tag.raw.slug}</div>)\n                  }\n                  <div className=\"year\" style={{ backgroundColor: item.node.data.color}}>{item.node.data.year}</div>\n              </div>\n            </TransitionLink>\n          )\n        }\n    );\n  \n  const projectPictures = projects.allPrismicProject.edges.map((item, key) =>\n        <div className=\"postcard\">\n            <Img className={ key == wheelLevel ? \"selected\" : \"\" } style={{ borderColor: item.node.data.color}} fluid={item.node.data.cover.localFile.childImageSharp.fluid} />\n        </div>\n  );\n\n  const gradientSteps = projects.allPrismicProject.edges.map((item, key) => {\n    const n = projects.allPrismicProject.edges.length\n    const p = Math.round(key * (100 / n));\n    return(p + \"% {background-color: \" + item.node.data.color +\";}\")\n  })\n  const gradient = `\n    @keyframes gradient {\n      `+ gradientSteps.join(\" \") +`\n    }\n  `;\n  const blockColor = `\n    footer.open .block{\n      background-color: ` + projects.allPrismicProject.edges[0].node. data.color + `;\n    }\n  `\n  \n  //useEffect(() => function() { }, []);\n  //injectStyle(gradient); injectStyle(blockColor) \n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div className=\"container\">\n        <div className={\"wheel level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectPictures}\n        </div>\n        <div className={\"store level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectsElements}\n        </div>\n        {/* TODO: write the good adress */}\n        <div className=\"hey\">bonjour@giardi.fr</div>\n        <main className={(status == STATUS_PROJECT?\"open\":\"\")}>{children}</main>\n        <Footer gradient={gradient} blockColor={blockColor}/>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}