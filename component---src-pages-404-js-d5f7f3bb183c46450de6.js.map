{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./src/components/headpic.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","HeadPic","pic","_3371093467","data","react_default","gatsby_image_default","fixed","file","childImageSharp","Footer","props","_useState","useState","deployed","setDeployed","profile","_3899957290","className","gradient","blockColor","onClick","event","prismicProfile","location","headpic","bio","raw","map","p","key","text","Date","getFullYear","href","Layout","_ref","children","wheelLevel","setWheelLevel","_useState2","status","setStatus","projects","_4203411656","projectsElements","allPrismicProject","edges","item","gatsby_plugin_transition_link_default","to","node","slugs","exit","trigger","_ref2","e","entry","length","state","mode","_ref3","delay","id","onMouseEnter","style","color","name","tags","tag","slug","borderColor","backgroundColor","year","projectPictures","fluid","cover","localFile","Math","round","join","Fragment","footer","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"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","file":"component---src-pages-404-js-d5f7f3bb183c46450de6.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n\nconst HeadPic = () => {\n    const pic = useStaticQuery(graphql`\n    query {\n        file(relativePath: { eq: \"gatsby-icon.png\" }) {\n            childImageSharp {\n                fixed(width: 75, height: 75) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n    }`)\n\n    return(\n        <Img fixed={pic.file.childImageSharp.fixed} />\n    )\n    \n}\n\nexport default HeadPic","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport HeadPic from \"./headpic\"\n\nconst Footer = (props) => {\n    const [deployed, setDeployed] = useState(\n        false\n    );\n\n    const profile = useStaticQuery(graphql`\n    query {\n        prismicProfile {\n            data {\n                bio {\n                    raw {\n                        text\n                    }\n                }\n                github {\n                    url\n                }\n                location\n                title\n                linkedin {\n                    url\n                }\n                resume {\n                    url\n                }\n            }\n        }\n    }`)\n\n    return(\n        <footer className={ deployed ? \"open\": \"\"}>\n            <style>{props.gradient} {props.blockColor}</style>\n            <div className=\"block\" onClick={event => setDeployed(!deployed)}>\n                <div className=\"position\">{profile.prismicProfile.data.title}</div>\n                <div className=\"location\">! {profile.prismicProfile.data.location}</div>\n            </div>\n            <div className=\"name\" onClick={event => setDeployed(!deployed)}>Vincent Giardina</div>\n            <div className=\"content\">\n                <HeadPic/>\n                { profile.prismicProfile.data.bio.raw.map((p) => <p className=\"bio\" key={\"text-\" + p.text}>{p.text}</p> ) }\n                <h1>Credits</h1>\n                Â© {new Date().getFullYear()}, Built with\n                {` `}\n                <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport injectStyle from '../utils/injectStyle';\nimport { Link } from \"gatsby\"\nimport TransitionLink from \"gatsby-plugin-transition-link\"\nimport anime from \"animejs\"\n\nimport Footer from \"./footer\"\nimport Img from \"gatsby-image\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const [wheelLevel, setWheelLevel] = useState(\n    0\n  );\n\n  const STATUS_MENU = \"menu\";\n  const STATUS_TRANSITION = \"transition\"\n  const STATUS_PROJECT = \"project\"\n  const [status, setStatus] = useState(\n    STATUS_MENU\n  );\n\n  const projects = useStaticQuery(graphql`\n  query {\n    allPrismicProject {\n      edges {\n        node {\n          data {\n            color\n            for\n            name {\n              text\n            }\n            with\n            year\n            tags {\n              tag {\n                raw {\n                  slug\n                }\n              }\n            }\n            cover {\n              localFile {\n                childImageSharp {\n                  fluid(maxWidth: 400, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          slugs\n        }\n      }\n    }\n  }\n  `)\n\n\n  // TODO: keep the header?\n  // TODO: appropriate way to import the image\n  // TODO: add a graphical signature indicating the current project in the wheel  \n\n  const projectsElements = projects.allPrismicProject.edges.map((item, key) =>{\n          const animOut = (node, e, exit, entry) => {\n            setStatus(STATUS_TRANSITION);\n          }\n          const animIn = (node, e, exit, entry) => {\n            setStatus(STATUS_PROJECT);\n          }\n          return(\n            <TransitionLink to={ \"/\" + item.node.slugs[0] }\n            exit={{\n              trigger: ({ node, e, exit, entry }) => animOut(node, e, exit, entry),\n              length: 0.5,\n              state: {\n                mode: \"in\"\n              }\n            }}\n            entry={{\n              trigger: ({ node, e, exit, entry }) => animIn(node, e, exit, entry),\n              length: 0.5,\n              delay: 0.5\n            }}\n            >\n              <div className=\"project\" id={key} onMouseEnter={event => setWheelLevel(key)}>\n                  <h1 style={{color: item.node.data.color}}>{item.node.data.name.text}</h1>\n                  <h1>{item.node.data.name.text}</h1>\n                  {\n                    item.node.data.tags.map((tag) => <div className=\"tag\" key={tag.tag.raw.slug+key} style={{ borderColor: item.node.data.color}}>{tag.tag.raw.slug}</div>)\n                  }\n                  <div className=\"year\" style={{ backgroundColor: item.node.data.color}}>{item.node.data.year}</div>\n              </div>\n            </TransitionLink>\n          )\n        }\n    );\n  \n  const projectPictures = projects.allPrismicProject.edges.map((item, key) =>\n        <div className=\"postcard\">\n            <Img className={ key == wheelLevel ? \"selected\" : \"\" } style={{ borderColor: item.node.data.color}} fluid={item.node.data.cover.localFile.childImageSharp.fluid} />\n        </div>\n  );\n\n  const gradientSteps = projects.allPrismicProject.edges.map((item, key) => {\n    const n = projects.allPrismicProject.edges.length\n    const p = Math.round(key * (100 / n));\n    return(p + \"% {background-color: \" + item.node.data.color +\";}\")\n  })\n  const gradient = `\n    @keyframes gradient {\n      `+ gradientSteps.join(\" \") +`\n    }\n  `;\n  const blockColor = `\n    footer.open .block{\n      background-color: ` + projects.allPrismicProject.edges[0].node. data.color + `;\n    }\n  `\n  \n  //useEffect(() => function() { }, []);\n  //injectStyle(gradient); injectStyle(blockColor) \n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div className=\"container\">\n        <div className={\"wheel level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectPictures}\n        </div>\n        <div className={\"store level-\" + wheelLevel + \"\" + (status == STATUS_TRANSITION?\" deployed\":\"\")}>\n          {projectsElements}\n        </div>\n        {/* TODO: write the good adress */}\n        <div className=\"hey\">bonjour@giardi.fr</div>\n        <main className={(status == STATUS_PROJECT?\"open\":\"\")}>{children}</main>\n        <Footer gradient={gradient} blockColor={blockColor}/>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}